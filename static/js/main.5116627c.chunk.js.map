{"version":3,"sources":["components/CharCard/CharCard.js","components/Wrapper/Wrapper.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["CharCard","props","onClick","setClicked","id","className","alt","name","src","image","Wrapper","children","Title","correctGuesses","bestScore","clickMessage","App","state","matches","clickedMatch","filter","match","clicked","console","log","i","length","setState","sort","a","b","Math","random","this","map","key","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m8CAYeA,G,MATE,SAAAC,GAAK,OAEnB,yBAAKC,QAAS,kBAAMD,EAAME,WAAWF,EAAMG,KAAKC,UAAU,iBACzD,yBAAKA,UAAU,iBACd,yBAAKC,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCFvBC,G,MAFC,SAAAT,GAAK,OAAI,yBAAKI,UAAU,WAAWJ,EAAMU,YCE1CC,G,MAFD,SAAAX,GAAK,OAAI,wBAAII,UAAU,SAASJ,EAAMU,Y,OCIhDE,G,MAAiB,GACjBC,EAAY,EACZC,EAAe,6GAyHJC,E,2MApHXC,MAAQ,CACJC,UACAL,iBACAC,YACAC,gB,EAGJZ,WAAa,SAAAC,GAGT,IAAMc,EAAU,EAAKD,MAAMC,QAGrBC,EAAeD,EAAQE,QAAO,SAAAC,GAAK,OAAIA,EAAMjB,KAAOA,KAI1D,GAAIe,EAAa,GAAGG,QAAQ,CAExBC,QAAQC,IAAK,YAAcX,GAC3BU,QAAQC,IAAK,eAAiBV,GAE9BD,EAAiB,EACjBE,EAAe,oDAEf,IAAK,IAAIU,EAAI,EAAIA,EAAIP,EAAQQ,OAASD,IAClCP,EAAQO,GAAGH,SAAU,EAGzB,EAAKK,SAAS,CAACZ,iBACf,EAAKY,SAAS,CAAEd,mBAChB,EAAKc,SAAS,CAACT,iBAGZ,GAAIL,EAAiB,GAGxBM,EAAa,GAAGG,SAAU,EAK1BP,EAAe,uCAFfF,EAIqBC,IACjBA,EAAYD,EACZ,EAAKc,SAAS,CAAEb,eAIpBI,EAAQU,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,YAG9C,EAAKL,SAAS,CAAET,YAChB,EAAKS,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACZ,qBACZ,CAGHI,EAAa,GAAGG,SAAU,EAG1BT,EAAiB,EAGjBE,EAAe,qCACfD,EAAY,GACZ,EAAKa,SAAS,CAAEb,cAEhB,IAAK,IAAIW,EAAI,EAAIA,EAAIP,EAAQQ,OAASD,IAClCP,EAAQO,GAAGH,SAAU,EAIzBJ,EAAQU,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,YAG9C,EAAKL,SAAS,CAAET,YAChB,EAAKS,SAAS,CAACd,mBACf,EAAKc,SAAS,CAACZ,mB,wEAKb,IAAD,OACL,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,yCAEA,wBAAIV,UAAU,gBACT4B,KAAKhB,MAAMF,cAGhB,wBAAIV,UAAU,4BAAd,oBACsB4B,KAAKhB,MAAMJ,eAC7B,6BAFJ,eAGiBoB,KAAKhB,MAAMH,WAE5B,yBAAKT,UAAU,aACf,yBAAKA,UAAU,OACd4B,KAAKhB,MAAMC,QAAQgB,KAAI,SAAAb,GAAK,OACzB,kBAAC,EAAD,CACIlB,WAAY,EAAKA,WACjBC,GAAIiB,EAAMjB,GACV+B,IAAKd,EAAMjB,GACXK,MAAOY,EAAMZ,kB,GA5GnB2B,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5116627c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./CharCard.css\";\r\n\r\nconst CharCard = props => (\r\n\r\n\t\t\t<div onClick={() => props.setClicked(props.id)} className=\"card col-md-3\">\r\n\t\t\t\t<div className=\"img-container\">\r\n\t\t\t\t\t<img alt={props.name} src={props.image} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n);\r\n\r\nexport default CharCard;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Title.css\";\r\n\r\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\r\n\r\nexport default Title;","import React, { Component } from \"react\";\nimport CharCard from \"./components/CharCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport matches from \"./characters.json\";\nimport \"./App.css\";\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Click each member of the hit BBC drama Peaky Blinders. But don't click anyone more than once, or you lose!\";\n\nclass App extends Component {\n    \n    // Setting this.state.matches to the matches json array\n    state = {\n        matches,\n        correctGuesses,\n        bestScore,\n        clickMessage\n    };\n\n    setClicked = id => {\n\n        // Make a copy of the state matches array to work with\n        const matches = this.state.matches;\n\n        // Filter for the clicked match\n        const clickedMatch = matches.filter(match => match.id === id);\n\n        // If the matched image's clicked value is already true, \n        // do the game over actions\n        if (clickedMatch[0].clicked){\n\n            console.log (\"Correct: \" + correctGuesses);\n            console.log (\"High Score: \" + bestScore);\n\n            correctGuesses = 0;\n            clickMessage = \"This character has already been picked, you lose!\"\n\n            for (let i = 0 ; i < matches.length ; i++){\n                matches[i].clicked = false;\n            }\n\n            this.setState({clickMessage});\n            this.setState({ correctGuesses });\n            this.setState({matches});\n\n        // Otherwise, if clicked = false, and the user hasn't finished\n        } else if (correctGuesses < 11) {\n\n            // Set its value to true\n            clickedMatch[0].clicked = true;\n\n            // increment the appropriate counter\n            correctGuesses++;\n            \n            clickMessage = \"Good job, this is a new character!\";\n\n            if (correctGuesses > bestScore){\n                bestScore = correctGuesses;\n                this.setState({ bestScore });\n            }\n\n            // Shuffle the array to be rendered in a random order\n            matches.sort(function(a, b){return 0.5 - Math.random()});\n\n            // Set this.state.matches equal to the new matches array\n            this.setState({ matches });\n            this.setState({correctGuesses});\n            this.setState({clickMessage});\n        } else {\n\n            // Set its value to true\n            clickedMatch[0].clicked = true;\n\n            // restart the guess counter\n            correctGuesses = 0;\n\n            // Egg on the user to play again\n            clickMessage = \"You've clicked on every character!\";\n            bestScore = 12;\n            this.setState({ bestScore });\n            \n            for (let i = 0 ; i < matches.length ; i++){\n                matches[i].clicked = false;\n            }\n\n            // Shuffle the array to be rendered in a random order\n            matches.sort(function(a, b){return 0.5 - Math.random()});\n\n            // Set this.state.matches equal to the new matches array\n            this.setState({ matches });\n            this.setState({correctGuesses});\n            this.setState({clickMessage});\n\n        }\n    };\n\n    render() {\n        return (\n            <Wrapper>\n                <Title>Peaky Blinders Memory Click Game</Title>\n        \n                <h3 className=\"scoreSummary\">\n                    {this.state.clickMessage}\n                </h3>\n                \n                <h3 className=\"scoreSummary card-header\">\n                    Correct Guesses: {this.state.correctGuesses} \n                    <br />\n                    Best Score: {this.state.bestScore} \n                </h3>\n                <div className=\"container\">\n                <div className=\"row\">\n                {this.state.matches.map(match => (\n                    <CharCard\n                        setClicked={this.setClicked}\n                        id={match.id}\n                        key={match.id}\n                        image={match.image}\n                    />\n                ))}\n                </div>\n                </div>\n\n            </Wrapper>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}